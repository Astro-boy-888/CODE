#include <bits/stdc++.h>

using namespace std;
/*
# 数组拼接

## **题目描述**

现在有多组整数数组，需要将它们合并成一个新的数组。

合并规则，从每个数组里按顺序取出固定长度的内容合并到新的数组中，取完的内容会删除掉，

如果该行不足固定长度或者已经为空，则直接取出剩余部分的内容放到新的数组中，继续下一行。

## **输入描述**

第一行是每次读取的固定长度，0<长度<10

第二行是整数数组的数目，0<数目<1000

第3-n行是需要合并的数组，[不同的](https://so.csdn.net/so/search?q=%E4%B8%8D%E5%90%8C%E7%9A%84&spm=1001.2101.3001.7020)数组用回车换行分隔，数组内部用逗号分隔，最大不超过100个元素。

## **输出描述**

输出一个新的数组，用逗号分隔。

## **示例1**

输入

```
3
2
2,5,6,7,9,5,7
1,7,4,3,4
```

输出

```
2,5,6,1,7,4,7,9,5,3,4,7
```

说明

> 1、获得长度3和数组数目2
> 
> 
> 2、先遍历第一行，获得2,5,6
> 
> 3、再遍历第二行，获得1,7,4
> 
> 4、再循环回到第一行，获得7,9,5
> 
> 5、再遍历第二行，获得3,4
> 
> 6、再回到第一行，获得7，按顺序拼接成最终结果
> 
## **示例2**
输入
```
4
3
1,2,3,4,5,6
1,2,3
1,2,3,4
```
输出
```
1,2,3,4,1,2,3,1,2,3,4,5,6
```
## **解题思路**
题目的要求是将多组整数数组合并成一个新的数组，合并的规则是从每个数组中按顺序取出指定长度的元素，然后将取出的元素拼接到新的数组中，直到所有数组中的元素全部被取完为止。
### **合并规则详解：**
1. **固定长度**：每次从一个数组中取出的元素个数是固定的，假设为`L`。
2. **多数组操作**：数组的数目是`N`个，需要按顺序逐个遍历这些数组。
3. **按序取元素**：
    - 如果一个数组剩余的元素不足`L`，则取出剩余的所有元素。
    - 如果一个数组的元素已经全部取完，则跳过该数组，继续处理下一个数组。
4. **循环合并**：每次遍历完所有数组后，若还有未取完的数组，继续从第一个数组开始按顺序取，直到所有数组都取完为止。
### **示例解释：**
### **示例1**
**输入**
```
3
2
2,5,6,7,9,5,7
1,7,4,3,4
```
**步骤解释**：
1. 固定长度为`3`，数组数目为`2`。
2. 第一轮：
    - 从第一个数组取3个元素：`2,5,6`。
    - 从第二个数组取3个元素：`1,7,4`。
3. 第二轮：
    - 从第一个数组取3个元素：`7,9,5`（接着取未取完的部分）。
    - 从第二个数组取2个元素：`3,4`（该数组剩余的元素不足3个，取出剩余部分）。
4. 第三轮：
    - 从第一个数组取1个元素：`7`（剩余的最后一个元素）。
    - 第二个数组已取完，跳过。
5. 合并后的新数组为：`2,5,6,1,7,4,7,9,5,3,4,7`。
**输出**
```
2,5,6,1,7,4,7,9,5,3,4,7
```
*/

/*
    TODO: 
    1.接收N，L 将数组传入 vector<vector<int>> arrays(N) 
    2.设置 vector<int> result 存放最终结果 bool hasMore = true 进行标记是否还有未处理的元素
    3.只要 hasMore = true 就要继续遍历所有数组 一进入循环默认把 hasMore 改为false 当真的所在数组还非空时才修改其为true
    4.最里层循环进行数组元素传入结果数组 并判断循环条件
    5.输出结果result
*/

int main()
{
    int N,L;
    cin >> L;
    cin >> N;

    vector<vector<int>> arrays(N);
    cin.ignore();

    for (size_t i = 0; i < N; i++)
    {   
        string array;
        getline(cin,array);
        string num;
        for (char c :array)
        {   
            if(c == ',')
            {
                arrays[i].push_back(stoi(num));
                num.clear();
            }
            else
            {
                num += c;
            }
        }
        arrays[i].push_back(stoi(num));
    }

    vector<int> result;
    bool hasMore = true;
    while (hasMore)
    {
        hasMore = false;
        for (int i = 0; i < N; i++)
        {
            //先判断当前数组是否为空 
            if(!arrays[i].empty()){
                hasMore = true;
                for (int j = 0; j < L && !arrays[i].empty(); j++)
                {   
                    //将第一个元素插入结果数组
                    result.push_back(arrays[i].front());
                    //删除第一个元素
                    arrays[i].erase(arrays[i].begin());
                }
            }
        }
    }

    for (auto it = result.begin();it != result.end();it ++)
    {   
        if(it != result.begin())
        {
            cout << ",";
        }
        cout << *it ;
    }
    cout <<endl;
}